name: Deploy Ionic PWA to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Find Ionic project directory
        id: find-ionic
        run: |
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [ -z "$APP_PATH" ]; then
            APP_PATH="."
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd $APP_PATH
          npm ci

      - name: Install Ionic CLI
        run: npm install -g @ionic/cli

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install Angular Service Worker
        run: |
          cd $APP_PATH
          # Get Angular core version and install matching service worker
          ANGULAR_VERSION=$(node -p "require('./node_modules/@angular/core/package.json').version")
          echo "Installing @angular/service-worker@${ANGULAR_VERSION}"
          npm install @angular/service-worker@${ANGULAR_VERSION}

      - name: Check if PWA is already configured
        run: |
          cd $APP_PATH
          if grep -q '"serviceWorker": true' angular.json; then
            echo "PWA_ALREADY_CONFIGURED=true" >> $GITHUB_ENV
          else
            echo "PWA_ALREADY_CONFIGURED=false" >> $GITHUB_ENV
          fi

      - name: Check if app is standalone
        run: |
          cd $APP_PATH
          if grep -q 'bootstrapApplication' src/main.ts; then
            echo "IS_STANDALONE=true" >> $GITHUB_ENV
          else
            echo "IS_STANDALONE=false" >> $GITHUB_ENV
          fi
        shell: /usr/bin/bash -e {0}
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          APP_PATH: ${{ env.APP_PATH }}
          PWA_ALREADY_CONFIGURED: ${{ env.PWA_ALREADY_CONFIGURED }}

      - name: Add PWA support if not configured
        if: ${{ env.PWA_ALREADY_CONFIGURED == 'false' }}
        run: |
          cd $APP_PATH

          # Get Angular core version and install dependencies
          ANGULAR_CORE_VERSION=$(node -p "require('./node_modules/@angular/core/package.json').version")
          echo "Detected installed @angular/core version is $ANGULAR_CORE_VERSION"
          npm install @angular/service-worker@$ANGULAR_CORE_VERSION
          npm install canvas

          # Create assets directories and generate assets
          mkdir -p src/assets/icons src/assets/screenshots
          # Generate assets with create-assets.js
          # Create icons and screenshots (your existing create-assets.js code)
          cat > create-assets.js << 'EOF'
          const { createCanvas } = require('canvas');
          const fs = require('fs');
          
          // Function to create an icon
          function createIcon(size) {
            const canvas = createCanvas(size, size);
            const ctx = canvas.getContext('2d');
            
            // Fill background
            ctx.fillStyle = '#1976d2';
            ctx.fillRect(0, 0, size, size);
            
            // Add some simple icon design
            ctx.beginPath();
            ctx.arc(size/2, size/2, size/3, 0, Math.PI * 2);
            ctx.fillStyle = '#ffffff';
            ctx.fill();
            
            // Save the icon
            fs.writeFileSync(`src/assets/icons/icon-${size}x${size}.png`, canvas.toBuffer());
          }
          
          // Create all required icons
          [72, 96, 128, 144, 152, 192, 384, 512].forEach(size => createIcon(size));
          
          // Create desktop screenshot (1920x1080)
          const desktopCanvas = createCanvas(1920, 1080);
          const dctx = desktopCanvas.getContext('2d');
          dctx.fillStyle = '#ffffff';
          dctx.fillRect(0, 0, 1920, 1080);
          dctx.fillStyle = '#1976d2';
          dctx.fillRect(0, 0, 1920, 80); // Header
          dctx.fillStyle = '#ffffff';
          dctx.font = 'bold 48px Arial';
          dctx.fillText('My Ionic PWA', 50, 55);
          fs.writeFileSync('src/assets/screenshots/desktop.png', desktopCanvas.toBuffer());
          
          // Create mobile screenshot (750x1334)
          const mobileCanvas = createCanvas(750, 1334);
          const mctx = mobileCanvas.getContext('2d');
          mctx.fillStyle = '#ffffff';
          mctx.fillRect(0, 0, 750, 1334);
          mctx.fillStyle = '#1976d2';
          mctx.fillRect(0, 0, 750, 60); // Header
          mctx.fillStyle = '#ffffff';
          mctx.font = 'bold 32px Arial';
          mctx.fillText('My Ionic PWA', 20, 40);
          fs.writeFileSync('src/assets/screenshots/mobile.png', mobileCanvas.toBuffer());
          EOF
          
          # Generate all assets
          node create-assets.js

          # Create ngsw-config.json in src directory
          cat > src/ngsw-config.json << EOF
          {
            "\$schema": "./node_modules/@angular/service-worker/config/schema.json",
            "index": "/index.html",
            "assetGroups": [
              {
                "name": "app",
                "installMode": "prefetch",
                "resources": {
                  "files": [
                    "/favicon.ico",
                    "/index.html",
                    "/manifest.webmanifest",
                    "/*.css",
                    "/*.js",
                    "!/ngsw-worker.js",
                    "/*.(svg|cur|jpg|jpeg|png|apng|webp|avif|gif|otf|ttf|woff|woff2)"
                  ]
                }
              },
              {
                "name": "assets",
                "installMode": "lazy",
                "updateMode": "prefetch",
                "resources": {
                  "files": [
                    "/assets/**"
                  ]
                }
              }
            ],
            "navigationUrls": [
              "/**",
              "!/tabs/*",
              "!/**/*.*",
              "!/**/*__*",
              "!/**/*__*/**"
            ],
            "dataGroups": []
          }
          EOF

          # Update angular.json with correct PWA configuration
          jq '.projects.app.architect.build.options.assets += [
            "src/manifest.webmanifest",
            "src/ngsw-worker.js",
            {
              "glob": "**/*",
              "input": "src/assets",
              "output": "/assets"
            }
          ] | .projects.app.architect.build.configurations.production += {
            "serviceWorker": true,
            "ngswConfigPath": "src/ngsw-config.json"
          }' angular.json > angular.tmp.json && mv angular.tmp.json angular.json

          # Create manifest.webmanifest in src folder
          cat > src/manifest.webmanifest << EOF
          {
            "name": "My Ionic PWA",
            "short_name": "IonicPWA",
            "theme_color": "#1976d2",
            "background_color": "#ffffff",
            "display": "standalone",
            "scope": "/$REPO_NAME/",
            "start_url": "/$REPO_NAME/",
            "icons": [
              {
                "src": "assets/icons/icon-72x72.png",
                "sizes": "72x72",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-96x96.png",
                "sizes": "96x96",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-128x128.png",
                "sizes": "128x128",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-144x144.png",
                "sizes": "144x144",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-152x152.png",
                "sizes": "152x152",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-192x192.png",
                "sizes": "192x192",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-384x384.png",
                "sizes": "384x384",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-512x512.png",
                "sizes": "512x512",
                "type": "image/png",
                "purpose": "maskable any"
              }
            ]
          }
          EOF

          # Update index.html
          sed -i "s|<base href=\"/\">|<base href=\"/$REPO_NAME/\">|" src/index.html
          sed -i '/<\/head>/i\  <link rel="manifest" href="manifest.webmanifest" crossorigin="use-credentials">\n  <meta name="theme-color" content="#1976d2">' src/index.html
          
          # Add service worker registration script
          sed -i '/<\/body>/i\  <script>\n    if ("serviceWorker" in navigator) {\n      window.addEventListener("load", function() {\n        navigator.serviceWorker.register("ngsw-worker.js", { scope: "/$REPO_NAME/" })\n          .then(function(registration) { console.log("SW registered:", registration.scope); })\n          .catch(function(error) { console.error("SW registration failed:", error); });\n      });\n    }\n  </script>' src/index.html
        shell: /usr/bin/bash -e {0}
        env:
          REPO_NAME: $REPO_NAME
          APP_PATH: $APP_PATH
          PWA_ALREADY_CONFIGURED: $PWA_ALREADY_CONFIGURED
          IS_STANDALONE: $IS_STANDALONE

      - name: Build the Ionic PWA
        run: |
          cd $APP_PATH
          
          # Ensure production environment exists first
          mkdir -p src/environments
          cat > src/environments/environment.ts << EOF
          export const environment = {
            production: false
          };
          EOF
          
          cat > src/environments/environment.prod.ts << EOF
          export const environment = {
            production: true
          };
          EOF
          
          # Add environment import to main.ts if not exists
          if ! grep -q "import { environment } from './environments/environment'" src/main.ts; then
            sed -i '1i import { environment } from "./environments/environment";' src/main.ts
          fi
          
          # Update main.ts to include service worker
          if ! grep -q "provideServiceWorker" src/main.ts; then
            sed -i '/import { routes } from/i import { provideServiceWorker } from "@angular/service-worker";' src/main.ts
            if [ "$IS_STANDALONE" = "true" ]; then
              sed -i '/providers: \[/a\    provideServiceWorker("ngsw-worker.js", { enabled: environment.production }),' src/main.ts
            else
              sed -i '/imports: \[/a\    ServiceWorkerModule.register("ngsw-worker.js", { enabled: environment.production }),' src/main.ts
            fi
          fi
          
          # Build the app with PWA support
          ng build \
            --configuration=production \
            --base-href="/$REPO_NAME/" \
            --deploy-url="/$REPO_NAME/"
          
          # Post-build fixes
          cd www
          cp index.html 404.html

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          enablement: pages

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.APP_PATH }}/www'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4