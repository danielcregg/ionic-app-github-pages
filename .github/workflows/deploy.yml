name: Deploy Ionic PWA to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Find Ionic project directory
        id: find-ionic
        run: |
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [ -z "$APP_PATH" ]; then
            APP_PATH="."
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd $APP_PATH
          npm ci

      - name: Install Global CLI Tools
        run: |
          npm install -g @ionic/cli @angular/cli

      - name: Install Angular Service Worker
        run: |
          cd $APP_PATH
          ANGULAR_VERSION=$(node -p "require('./node_modules/@angular/core/package.json').version")
          npm install @angular/service-worker@${ANGULAR_VERSION}

      - name: Check if PWA is already configured
        run: |
          cd $APP_PATH
          if grep -q '"serviceWorker": true' angular.json; then
            echo "PWA_ALREADY_CONFIGURED=true" >> $GITHUB_ENV
          else
            echo "PWA_ALREADY_CONFIGURED=false" >> $GITHUB_ENV
          fi

      - name: Check if app is standalone
        run: |
          cd $APP_PATH
          if grep -q 'bootstrapApplication' src/main.ts; then
            echo "IS_STANDALONE=true" >> $GITHUB_ENV
          else
            echo "IS_STANDALONE=false" >> $GITHUB_ENV
          fi

      - name: Add PWA support if not configured
        if: ${{ env.PWA_ALREADY_CONFIGURED == 'false' }}
        run: |
          cd $APP_PATH

          # 1. Create the manifest file
          cat > src/manifest.webmanifest << EOF
          {
            "name": "Ionic PWA App",
            "short_name": "IonicPWA",
            "theme_color": "#1976d2",
            "background_color": "#ffffff",
            "display": "standalone",
            "scope": "/$REPO_NAME/",
            "start_url": "/$REPO_NAME/",
            "icons": [
              {
                "src": "assets/icons/icon-72x72.png",
                "sizes": "72x72",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "assets/icons/icon-512x512.png",
                "sizes": "512x512",
                "type": "image/png",
                "purpose": "maskable any"
              }
            ]
          }
          EOF

          # 2. Create icons directory and sample icons
          mkdir -p src/assets/icons
          cp src/assets/icon/favicon.png src/assets/icons/icon-72x72.png 2>/dev/null || :
          cp src/assets/icon/favicon.png src/assets/icons/icon-512x512.png 2>/dev/null || :

          # 3. Create ngsw-config.json
          cat > src/ngsw-config.json << EOF
          {
            "\$schema": "./node_modules/@angular/service-worker/config/schema.json",
            "index": "/index.html",
            "assetGroups": [
              {
                "name": "app",
                "installMode": "prefetch",
                "resources": {
                  "files": [
                    "/favicon.ico",
                    "/index.html",
                    "/manifest.webmanifest",
                    "/*.css",
                    "/*.js",
                    "!/ngsw-worker.js"
                  ]
                }
              },
              {
                "name": "assets",
                "installMode": "lazy",
                "updateMode": "prefetch",
                "resources": {
                  "files": [
                    "/assets/**",
                    "/*.(svg|cur|jpg|jpeg|png|apng|webp|avif|gif|otf|ttf|woff|woff2)"
                  ]
                }
              }
            ],
            "navigationUrls": [
              "/**",
              "!/**/*.{js,css,json,jpg,jpeg,png,gif,webp,ico,woff,woff2}",
              "!/**/*__*",
              "!/**/*__*/**"
            ],
            "dataGroups": []
          }
          EOF

          # 4. Update angular.json
          jq '.projects.app.architect.build.options += {
            "serviceWorker": true,
            "ngswConfigPath": "src/ngsw-config.json"
          } | .projects.app.architect.build.configurations.production += {
            "serviceWorker": true,
            "baseHref": "/'$REPO_NAME'/",
            "deployUrl": "/'$REPO_NAME'/"
          } | .projects.app.architect.build.options.assets += [
            "src/manifest.webmanifest",
            {
              "glob": "ngsw-worker.js",
              "input": "node_modules/@angular/service-worker",
              "output": "/"
            }
          ]' angular.json > angular.tmp.json && mv angular.tmp.json angular.json

          # 5. Update index.html
          sed -i "s|<base href=\"/\">|<base href=\"/$REPO_NAME/\">|" src/index.html
          sed -i '/<\/head>/i\  <link rel="manifest" href="manifest.webmanifest" crossorigin="use-credentials">\n  <meta name="theme-color" content="#1976d2">' src/index.html

          # 6. Add service worker registration
          sed -i '/<\/body>/i\  <script>\n    if ("serviceWorker" in navigator) {\n      window.addEventListener("load", function() {\n        navigator.serviceWorker.register("ngsw-worker.js")\n          .then(function(registration) {\n            console.log("Service Worker registered with scope:", registration.scope);\n          })\n          .catch(function(error) {\n            console.error("Service Worker registration failed:", error);\n          });\n      });\n    }\n  </script>' src/index.html

      - name: Build the Ionic PWA
        run: |
          cd $APP_PATH

          # Ensure environments directory exists
          mkdir -p src/environments

          # Create environment files
          cat > src/environments/environment.ts << EOF
          export const environment = {
            production: false
          };
          EOF

          cat > src/environments/environment.prod.ts << EOF
          export const environment = {
            production: true
          };
          EOF

          # Modify main.ts to include environment and service worker
          if ! grep -q "import { environment } from './environments/environment';" src/main.ts; then
            sed -i "1i import { environment } from './environments/environment';" src/main.ts
          fi

          if [ "$IS_STANDALONE" = "true" ]; then
            if ! grep -q "provideServiceWorker" src/main.ts; then
              sed -i "s/providers: \[/providers: [provideServiceWorker('ngsw-worker.js', { enabled: environment.production }),/" src/main.ts
              sed -i "1i import { provideServiceWorker } from '@angular/service-worker';" src/main.ts
            fi
          else
            if ! grep -q "ServiceWorkerModule.register" src/app/app.module.ts; then
              sed -i "s/imports: \[/imports: [ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),/" src/app/app.module.ts
              sed -i "1i import { ServiceWorkerModule } from '@angular/service-worker';" src/app/app.module.ts
              sed -i "1i import { environment } from '../environments/environment';" src/app/app.module.ts
            fi
          fi

          # Build the app with PWA support
          ionic build --prod

          # Post-build fixes for PWA
          cd www
          cp index.html 404.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: '${{ env.APP_PATH }}/www'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1